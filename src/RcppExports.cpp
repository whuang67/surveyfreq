// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// fibonacci
int fibonacci(int n);
RcppExport SEXP _surveyfreq_fibonacci(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(fibonacci(n));
    return rcpp_result_gen;
END_RCPP
}
// sort_cpp
SEXP sort_cpp(SEXP arr, String method, bool overwrite);
RcppExport SEXP _surveyfreq_sort_cpp(SEXP arrSEXP, SEXP methodSEXP, SEXP overwriteSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type arr(arrSEXP);
    Rcpp::traits::input_parameter< String >::type method(methodSEXP);
    Rcpp::traits::input_parameter< bool >::type overwrite(overwriteSEXP);
    rcpp_result_gen = Rcpp::wrap(sort_cpp(arr, method, overwrite));
    return rcpp_result_gen;
END_RCPP
}
// surveyfreq
NumericMatrix surveyfreq(SEXP arr, Nullable<NumericVector> based_wt, Nullable<NumericMatrix> rep_wts, bool includeNA, double NA_wt, String varmethod, double BRRfay);
RcppExport SEXP _surveyfreq_surveyfreq(SEXP arrSEXP, SEXP based_wtSEXP, SEXP rep_wtsSEXP, SEXP includeNASEXP, SEXP NA_wtSEXP, SEXP varmethodSEXP, SEXP BRRfaySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type arr(arrSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericVector> >::type based_wt(based_wtSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericMatrix> >::type rep_wts(rep_wtsSEXP);
    Rcpp::traits::input_parameter< bool >::type includeNA(includeNASEXP);
    Rcpp::traits::input_parameter< double >::type NA_wt(NA_wtSEXP);
    Rcpp::traits::input_parameter< String >::type varmethod(varmethodSEXP);
    Rcpp::traits::input_parameter< double >::type BRRfay(BRRfaySEXP);
    rcpp_result_gen = Rcpp::wrap(surveyfreq(arr, based_wt, rep_wts, includeNA, NA_wt, varmethod, BRRfay));
    return rcpp_result_gen;
END_RCPP
}
// SGD_lm
arma::vec SGD_lm(arma::mat X, arma::vec y, bool intercept, int iter, double learning_rate);
RcppExport SEXP _surveyfreq_SGD_lm(SEXP XSEXP, SEXP ySEXP, SEXP interceptSEXP, SEXP iterSEXP, SEXP learning_rateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< bool >::type intercept(interceptSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< double >::type learning_rate(learning_rateSEXP);
    rcpp_result_gen = Rcpp::wrap(SGD_lm(X, y, intercept, iter, learning_rate));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_surveyfreq_fibonacci", (DL_FUNC) &_surveyfreq_fibonacci, 1},
    {"_surveyfreq_sort_cpp", (DL_FUNC) &_surveyfreq_sort_cpp, 3},
    {"_surveyfreq_surveyfreq", (DL_FUNC) &_surveyfreq_surveyfreq, 7},
    {"_surveyfreq_SGD_lm", (DL_FUNC) &_surveyfreq_SGD_lm, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_surveyfreq(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
